{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","key","GifExpertApp","categories","index","ReactDOM","render","document","getElementById"],"mappings":"2MAsCeA,EAjCK,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAAkB,EACDC,mBAAS,IADR,mBAC7BC,EAD6B,KAClBC,EADkB,KAgBpC,OACI,0BAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAGFJ,EAAWK,QAAUP,GAAc,SAAAQ,GAAI,OAAGN,GAAH,mBAAkBM,OACzDL,EAAc,MAMV,4CACA,2BACIM,KAAK,OACLC,MAAOR,EACPS,SAnBa,SAACN,GACtBF,EAAcE,EAAEO,OAAOF,Y,uBCQhBG,EAjBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNC,EADM,0FACiFC,UAAUH,GAD3F,sBAGMI,MAAMF,GAHZ,cAGNG,EAHM,gBAISA,EAAIC,OAJb,uBAILC,EAJK,EAILA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAIQ,EAAIG,OAAOC,iBAAiBZ,QAGxCa,QAAQC,IAAIR,GAbA,kBAcLA,GAdK,4CAAH,sDCqBES,EAlBM,SAACjB,GAAc,IAAD,EACLb,mBAAS,CAC/BoB,KAAM,GACNW,SAAS,IAHkB,mBACxBC,EADwB,KACjBC,EADiB,KAe/B,OATAC,qBAAU,WACNtB,EAAQC,GACHsB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACnBb,KAAKgB,EACLL,SAAQ,SAGlB,CAAClB,IAEImB,GCPIK,EATK,SAAC,GAAoB,IAAnBZ,EAAkB,EAAlBA,MAASV,GAAS,EAAZS,GAAY,EAATT,KAE3B,OACA,yBAAKuB,UAAU,8CACX,yBAAKC,IAAKxB,EAAKyB,IAAKf,IACpB,2BAAIA,KCwBGgB,EAzBC,SAAC,GAAe,IAAd5B,EAAa,EAAbA,SAAa,EAQHiB,EAAajB,GAA9BkB,EARoB,EAQpBA,QAASX,EARW,EAQXA,KAGhB,OAFAQ,QAAQC,IAAIE,EAASX,GAGjB,oCACI,4BAAKP,GAGJkB,GAAW,uBAAGO,UAAU,oCAAb,WACZ,yBAAKA,UAAU,aACVlB,EAAKE,KAAI,SAAAC,GAAG,OAAE,kBAAC,EAAD,eAAamB,IAAKnB,EAAIC,IAAQD,QANrD,MCSOoB,EAvBM,WAAM,IAAD,EAEc3C,mBAAS,CAAC,kBAFxB,mBAEf4C,EAFe,KAEH7C,EAFG,KAOtB,OACI,oCACI,4CAGA,kBAAC,EAAD,CAAcA,cAAeA,IAC7B,6BAEA,4BACK6C,EAAWtB,KAAI,SAACT,EAASgC,GAAV,OAAoB,kBAAC,EAAD,CAASH,IAAK7B,EAAUA,SAAUA,U,MCdtFiC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.53cc13a1.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n//const AddCategory = ({handleChangeCategories}) =>{\r\n// const AddCategory = ({setCategories,categories}) =>{\r\nconst AddCategory = ({setCategories}) =>{\r\n    const [inputValue,setInputValue] = useState('')\r\n\r\n    const handleTextChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        // setCategories([...categories,inputValue])\r\n        // inputValue.trim() && handleChangeCategories(inputValue);\r\n        inputValue.trim() && setCategories(cats=>[inputValue, ...cats]); //sin necesidad de categories, los set tienen callback opcional que trae el estado anterior;\r\n        setInputValue('');\r\n        \r\n    }\r\n\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <h2>Add Category</h2>\r\n            <input\r\n                type='text'\r\n                value={inputValue}\r\n                onChange={handleTextChange}\r\n\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","const getGifs = async (category) =>{\r\n    const url=`https://api.giphy.com/v1/gifs/search?api_key=P5wttDbHgIBvWzWdoq50pr8jtsyvx6YV&q=${encodeURI(category)}&limit=10`;\r\n\r\n    const res = await fetch(url);\r\n    const {data} = await res.json();\r\n    \r\n    const gifs = data.map(img=>{\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images.downsized_medium.url\r\n        }\r\n    })\r\n    console.log(gifs);\r\n    return gifs;\r\n}\r\n\r\nexport default getGifs;","import {useState, useEffect} from 'react';\r\nimport getGifs from '../helpers/getGifs';\r\n\r\nconst useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then(imgs => setState({\r\n                data:imgs,\r\n                loading:false\r\n            })) \r\n            //.then(setState)//como la funcion entrega solo 1 argumento a setImages, se puede acortar asi\r\n    },[category])\r\n\r\n    return state;\r\n}\r\n\r\nexport default useFetchGifs;","import React from 'react'\r\n\r\nconst GifGridItem = ({title,id,url}) => {\r\n    \r\n    return (\r\n    <div className='card animate__animated animate__fadeInDown'>\r\n        <img src={url} alt={title}/> \r\n        <p>{title}</p>\r\n    </div>)\r\n}\r\n\r\nexport default GifGridItem;","// import React, { useState,useEffect } from 'react'\r\nimport React from 'react'\r\nimport useFetchGifs from '../hooks/useFetchGifs';\r\n// import getGifs from '../helpers/getGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\nconst GifGrid = ({category}) =>{\r\n    // const [images, setImages] = useState([]);\r\n\r\n    // useEffect(()=>{\r\n    //     getGifs(category)\r\n    //         // .then(imgs => setImages(imgs)) \r\n    //         .then(setImages)//como la funcion entrega solo 1 argumento a setImages, se puede acortar asi\r\n    // },[category])\r\n    const {loading, data} = useFetchGifs(category);\r\n    console.log(loading, data);\r\n\r\n    return(\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            {/* {loading? 'Cargando...':'Data cargada'} */}\r\n            {loading && <p className='animate__animated animate__flash'>Loading</p>}\r\n            <div className='card-grid'>\r\n                {data.map(img=><GifGridItem key={img.id} {...img} />)} \r\n            </div> {/* el spread operator envia todos los elementos de img por separado */}\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default GifGrid;","import React,{useState} from 'react'\r\nimport AddCategory from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid';\r\n\r\nconst GifExpertApp = () =>{\r\n\r\n    const [categories, setCategories] = useState(['One Punch Man']);\r\n\r\n    // const handleChangeCategories = (input) =>{\r\n    //     setCategories([...categories,input])\r\n    // }\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            {/* <AddCategory  setCategories={setCategories} categories={categories}/> */}\r\n            {/* <AddCategory  handleChangeCategories = {handleChangeCategories}/> */}\r\n            <AddCategory  setCategories={setCategories} />\r\n            <hr/>\r\n            {/* <button onClick={handleAddCategory}>Agregar</button> */}\r\n            <ol>\r\n                {categories.map((category,index) => <GifGrid key={category} category={category} />)}\r\n            </ol>\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}